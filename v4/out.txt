Tokens gerados:
LexToken(FUNCAO,'FUNCAO',1,0)
LexToken(IDENTIFICADOR,'fib',1,7)
LexToken(PARENTESES_ESQ,'(',1,10)
LexToken(NUMERO,0,1,12)
LexToken(PARENTESES_DIR,')',1,14)
LexToken(VIRGULA,',',1,15)
LexToken(DOIS_PONTOS,':',1,16)
LexToken(NUMERO,0,1,18)
LexToken(PONTO_E_VIRGULA,';',1,20)
LexToken(FUNCAO,'FUNCAO',2,22)
LexToken(IDENTIFICADOR,'fib',2,29)
LexToken(PARENTESES_ESQ,'(',2,32)
LexToken(NUMERO,1,2,34)
LexToken(PARENTESES_DIR,')',2,36)
LexToken(VIRGULA,',',2,37)
LexToken(DOIS_PONTOS,':',2,38)
LexToken(NUMERO,1,2,40)
LexToken(PONTO_E_VIRGULA,';',2,42)
LexToken(FUNCAO,'FUNCAO',3,44)
LexToken(IDENTIFICADOR,'fib',3,51)
LexToken(PARENTESES_ESQ,'(',3,54)
LexToken(IDENTIFICADOR,'n',3,56)
LexToken(PARENTESES_DIR,')',3,58)
LexToken(DOIS_PONTOS,':',3,59)
LexToken(IDENTIFICADOR,'a',4,65)
LexToken(ATRIBUICAO,'=',4,67)
LexToken(IDENTIFICADOR,'fib',4,69)
LexToken(PARENTESES_ESQ,'(',4,72)
LexToken(IDENTIFICADOR,'n',4,73)
LexToken(OPERADOR_ARITMETICO,'-',4,74)
LexToken(NUMERO,1,4,75)
LexToken(PARENTESES_DIR,')',4,76)
LexToken(PONTO_E_VIRGULA,';',4,77)
LexToken(IDENTIFICADOR,'b',5,83)
LexToken(ATRIBUICAO,'=',5,85)
LexToken(IDENTIFICADOR,'fib',5,87)
LexToken(PARENTESES_ESQ,'(',5,90)
LexToken(IDENTIFICADOR,'n',5,91)
LexToken(OPERADOR_ARITMETICO,'-',5,92)
LexToken(NUMERO,2,5,93)
LexToken(PARENTESES_DIR,')',5,94)
LexToken(PONTO_E_VIRGULA,';',5,95)
LexToken(IDENTIFICADOR,'a',6,101)
LexToken(OPERADOR_ARITMETICO,'+',6,103)
LexToken(IDENTIFICADOR,'b',6,105)
LexToken(PONTO_E_VIRGULA,';',6,106)
LexToken(FIM,'FIM',7,108)
LexToken(IDENTIFICADOR,'fib5',8,112)
LexToken(ATRIBUICAO,'=',8,117)
LexToken(IDENTIFICADOR,'fib',8,119)
LexToken(PARENTESES_ESQ,'(',8,122)
LexToken(NUMERO,5,8,123)
LexToken(PARENTESES_DIR,')',8,124)
LexToken(PONTO_E_VIRGULA,';',8,125)
LexToken(ESCREVER,'ESCREVER',9,127)
LexToken(PARENTESES_ESQ,'(',9,135)
LexToken(IDENTIFICADOR,'fib5',9,136)
LexToken(PARENTESES_DIR,')',9,140)
LexToken(PONTO_E_VIRGULA,';',9,141)
Statement list: [BranchNode(fib, NumberNode(0), [ReturnNode(NumberNode(0))])]
Statement list: [BranchNode(fib, NumberNode(0), [ReturnNode(NumberNode(0))]), BranchNode(fib, NumberNode(1), [ReturnNode(NumberNode(1))])]
AssignNode: AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])) - a = FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])
Statement list: [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))]))]
AssignNode: AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])) - b = FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])
Statement list: [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))]))]
Statement list: [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))]
Statement list: [BranchNode(fib, NumberNode(0), [ReturnNode(NumberNode(0))]), BranchNode(fib, NumberNode(1), [ReturnNode(NumberNode(1))]), FunctionNode(fib, ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
AssignNode: AssignNode(fib5, FunctionCallNode(fib, [NumberNode(5)])) - fib5 = FunctionCallNode(fib, [NumberNode(5)])
Statement list: [BranchNode(fib, NumberNode(0), [ReturnNode(NumberNode(0))]), BranchNode(fib, NumberNode(1), [ReturnNode(NumberNode(1))]), FunctionNode(fib, ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))]), AssignNode(fib5, FunctionCallNode(fib, [NumberNode(5)]))]
Statement list: [BranchNode(fib, NumberNode(0), [ReturnNode(NumberNode(0))]), BranchNode(fib, NumberNode(1), [ReturnNode(NumberNode(1))]), FunctionNode(fib, ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))]), AssignNode(fib5, FunctionCallNode(fib, [NumberNode(5)])), WriteNode(IdentifierNode(fib5))]
ProgramNode([BranchNode(fib, NumberNode(0), [ReturnNode(NumberNode(0))]), BranchNode(fib, NumberNode(1), [ReturnNode(NumberNode(1))]), FunctionNode(fib, ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))]), AssignNode(fib5, FunctionCallNode(fib, [NumberNode(5)])), WriteNode(IdentifierNode(fib5))])

Interpretação do código:
Definindo função com ramos fib
Definindo função com ramos fib
Chamando função fib com env {}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Created local_env: {'n': 5} with params: ['n'] and arguments: [NumberNode(5)]
Executando função normal fib com params ['n'] e args [NumberNode(5)], env: {'n': 5}
Chamando função fib com env {'n': 5}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Created local_env: {'n': 4} with params: ['n'] and arguments: [BinOpNode(-, IdentifierNode(n), NumberNode(1))]
Executando função normal fib com params ['n'] e args [BinOpNode(-, IdentifierNode(n), NumberNode(1))], env: {'n': 4}
Chamando função fib com env {'n': 4}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Created local_env: {'n': 3} with params: ['n'] and arguments: [BinOpNode(-, IdentifierNode(n), NumberNode(1))]
Executando função normal fib com params ['n'] e args [BinOpNode(-, IdentifierNode(n), NumberNode(1))], env: {'n': 3}
Chamando função fib com env {'n': 3}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Created local_env: {'n': 2} with params: ['n'] and arguments: [BinOpNode(-, IdentifierNode(n), NumberNode(1))]
Executando função normal fib com params ['n'] e args [BinOpNode(-, IdentifierNode(n), NumberNode(1))], env: {'n': 2}
Chamando função fib com env {'n': 2}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Executando branch da função fib com condição NumberNode(1)
Created local_env: {'n': 2, NumberNode(1): 1} with params: [NumberNode(1)] and arguments: [1]
Resultado do branch: 1
Chamando função fib com env {'n': 2, 'a': 1}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Executando branch da função fib com condição NumberNode(0)
Created local_env: {'n': 2, 'a': 1, NumberNode(0): 0} with params: [NumberNode(0)] and arguments: [0]
Resultado do branch: 0
Resultado da função normal: 1
Chamando função fib com env {'n': 3, 'a': 1}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Executando branch da função fib com condição NumberNode(1)
Created local_env: {'n': 3, 'a': 1, NumberNode(1): 1} with params: [NumberNode(1)] and arguments: [1]
Resultado do branch: 1
Resultado da função normal: 2
Chamando função fib com env {'n': 4, 'a': 2}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Created local_env: {'n': 2, 'a': 2} with params: ['n'] and arguments: [BinOpNode(-, IdentifierNode(n), NumberNode(2))]
Executando função normal fib com params ['n'] e args [BinOpNode(-, IdentifierNode(n), NumberNode(2))], env: {'n': 2, 'a': 2}
Chamando função fib com env {'n': 2, 'a': 2}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Executando branch da função fib com condição NumberNode(1)
Created local_env: {'n': 2, 'a': 2, NumberNode(1): 1} with params: [NumberNode(1)] and arguments: [1]
Resultado do branch: 1
Chamando função fib com env {'n': 2, 'a': 1}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Executando branch da função fib com condição NumberNode(0)
Created local_env: {'n': 2, 'a': 1, NumberNode(0): 0} with params: [NumberNode(0)] and arguments: [0]
Resultado do branch: 0
Resultado da função normal: 1
Resultado da função normal: 3
Chamando função fib com env {'n': 5, 'a': 3}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Created local_env: {'n': 3, 'a': 3} with params: ['n'] and arguments: [BinOpNode(-, IdentifierNode(n), NumberNode(2))]
Executando função normal fib com params ['n'] e args [BinOpNode(-, IdentifierNode(n), NumberNode(2))], env: {'n': 3, 'a': 3}
Chamando função fib com env {'n': 3, 'a': 3}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Created local_env: {'n': 2, 'a': 3} with params: ['n'] and arguments: [BinOpNode(-, IdentifierNode(n), NumberNode(1))]
Executando função normal fib com params ['n'] e args [BinOpNode(-, IdentifierNode(n), NumberNode(1))], env: {'n': 2, 'a': 3}
Chamando função fib com env {'n': 2, 'a': 3}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Executando branch da função fib com condição NumberNode(1)
Created local_env: {'n': 2, 'a': 3, NumberNode(1): 1} with params: [NumberNode(1)] and arguments: [1]
Resultado do branch: 1
Chamando função fib com env {'n': 2, 'a': 1}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Executando branch da função fib com condição NumberNode(0)
Created local_env: {'n': 2, 'a': 1, NumberNode(0): 0} with params: [NumberNode(0)] and arguments: [0]
Resultado do branch: 0
Resultado da função normal: 1
Chamando função fib com env {'n': 3, 'a': 1}
func_list: [('branch', NumberNode(0), [ReturnNode(NumberNode(0))]), ('branch', NumberNode(1), [ReturnNode(NumberNode(1))]), ('normal', ['n'], [AssignNode(a, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(1))])), AssignNode(b, FunctionCallNode(fib, [BinOpNode(-, IdentifierNode(n), NumberNode(2))])), BinOpNode(+, IdentifierNode(a), IdentifierNode(b))])]
Executando branch da função fib com condição NumberNode(1)
Created local_env: {'n': 3, 'a': 1, NumberNode(1): 1} with params: [NumberNode(1)] and arguments: [1]
Resultado do branch: 1
Resultado da função normal: 2
Resultado da função normal: 5
5

Código C gerado:
#include <stdio.h>
#include <stdlib.h>
int main() {
int fib_1(int n) { a = fib_1((n - 1));; b = fib_1((n - 2));; return (a + b); }
int fib5 = fib_1(5);
printf("%d\n", fib5);
return 0;
}
